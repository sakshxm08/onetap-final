(function(f){if(typeof exports==="object"&&typeof module!=="undefined"){module.exports=f()}else if(typeof define==="function"&&define.amd){define([],f)}else{var g;if(typeof window!=="undefined"){g=window}else if(typeof global!=="undefined"){g=global}else if(typeof self!=="undefined"){g=self}else{g=this}g.InputHints = f()}})(function(){var define,module,exports;module={exports:(exports={})};
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var React = require('react');
var PureComponent = React.PureComponent;

var PropTypes = require('prop-types');
var Typewriting = require('react-typewriting');

var InputHints = function (_PureComponent) {
    _inherits(InputHints, _PureComponent);

    function InputHints() {
        _classCallCheck(this, InputHints);

        return _possibleConstructorReturn(this, (InputHints.__proto__ || Object.getPrototypeOf(InputHints)).apply(this, arguments));
    }

    _createClass(InputHints, [{
        key: 'render',
        value: function render() {
            var _props = this.props,
                placeholders = _props.placeholders,
                props = _objectWithoutProperties(_props, ['placeholders']);

            return React.createElement(Typewriting, _extends({}, props, {
                component: 'input',
                stringPropName: 'placeholder',
                strings: placeholders
            }));
        }
    }]);

    return InputHints;
}(PureComponent);

InputHints.propTypes = {
    placeholders: PropTypes.arrayOf(PropTypes.string).isRequired
};
InputHints.defaultProps = {
    waitBeforeDeleteMs: 2000
};
exports.default = InputHints;


return module.exports;});
