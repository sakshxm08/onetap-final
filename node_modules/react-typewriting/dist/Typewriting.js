(function(f){if(typeof exports==="object"&&typeof module!=="undefined"){module.exports=f()}else if(typeof define==="function"&&define.amd){define([],f)}else{var g;if(typeof window!=="undefined"){g=window}else if(typeof global!=="undefined"){g=global}else if(typeof self!=="undefined"){g=self}else{g=this}g.Typewriting = f()}})(function(){var define,module,exports;module={exports:(exports={})};
'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

var React = require('react');
var PureComponent = React.PureComponent;

var PropTypes = require('prop-types');

var TICK_INIT = 'TICK_INIT';
var TICK_WRITE = 'TICK_WRITE';
var TICK_DELETE = 'TICK_DELETE';
var START_DELETE = 'START_DELETE';

function getComponentProps(_ref) {
    var props = _objectWithoutProperties(_ref, []);

    delete props.strings;
    delete props.stringPropName;
    delete props.waitBeforeDeleteMs;
    delete props.writeSpeedMs;
    delete props.deleteSpeedMs;
    delete props.component;
    return props;
}

var SpeedTuple = function SpeedTuple(props, propName, componentName) {
    var prop = props[propName];
    var isValid = Array.isArray(prop) && prop.length === 2 && typeof prop[0] === "number" && typeof prop[1] === "number";
    if (!isValid) {
        return new Error('Invalid prop `' + propName + '` supplied to' + ' `' + componentName + '`. Expected a tuple of numbers.');
    }
};

var NumberInterval = PropTypes.oneOfType([PropTypes.number, SpeedTuple]);

var randomizeTimeout = function randomizeTimeout(ms) {
    return Array.isArray(ms) ?
    // random value inside the specified min and max thresholds
    ms[0] + Math.random() * (ms[1] - ms[0]) :
    // randomize the value - with a minimum threshold
    Math.max(Math.random() * ms, 30);
};

var Typewriting = function (_PureComponent) {
    _inherits(Typewriting, _PureComponent);

    function Typewriting(props) {
        _classCallCheck(this, Typewriting);

        var _this = _possibleConstructorReturn(this, (Typewriting.__proto__ || Object.getPrototypeOf(Typewriting)).call(this, props));

        _this._tick = function () {
            var strings = _this.props.strings;
            var _this$state = _this.state,
                currentTextIdx = _this$state.currentTextIdx,
                currentCharPos = _this$state.currentCharPos,
                isDeleting = _this$state.isDeleting;


            var currentText = strings[currentTextIdx];

            var nextCharPos = isDeleting ? currentCharPos - 1 : currentCharPos + 1;

            if (isDeleting) {
                if (nextCharPos < 0) {
                    _this._moveToNextText();
                } else {
                    _this.setState({
                        currentCharPos: nextCharPos
                    });
                }
                _this._queueTick(TICK_DELETE);
            } else {
                if (nextCharPos > currentText.length) {
                    _this.setState({
                        isDeleting: true
                    });
                    _this._queueTick(START_DELETE);
                } else {
                    _this.setState({
                        currentCharPos: nextCharPos
                    });
                    _this._queueTick(TICK_WRITE);
                }
            }
        };

        _this._ticker = null;
        _this._ref = null;
        _this.state = {
            currentTextIdx: 0,
            currentCharPos: 0,
            isDeleting: false
        };
        return _this;
    }

    _createClass(Typewriting, [{
        key: 'componentDidMount',
        value: function componentDidMount() {
            this._queueTick(TICK_INIT);
        }
    }, {
        key: 'componentWillUnmount',
        value: function componentWillUnmount() {
            clearTimeout(this._ticker);
        }
    }, {
        key: '_queueTick',
        value: function _queueTick(type) {
            var _props = this.props,
                writeSpeedMs = _props.writeSpeedMs,
                deleteSpeedMs = _props.deleteSpeedMs,
                waitBeforeDeleteMs = _props.waitBeforeDeleteMs;


            var timeout = type === TICK_INIT ? 0 : type === TICK_WRITE ? randomizeTimeout(writeSpeedMs) : type === TICK_DELETE ? randomizeTimeout(deleteSpeedMs) : type === START_DELETE ? waitBeforeDeleteMs : 0; // ¯\_(ツ)_/¯

            this._ticker = setTimeout(this._tick, timeout);
        }
    }, {
        key: '_moveToNextText',
        value: function _moveToNextText() {
            var strings = this.props.strings;
            var currentTextIdx = this.state.currentTextIdx;

            var nextTextIdx = currentTextIdx + 1;
            this.setState({
                isDeleting: false,
                currentTextIdx: nextTextIdx < strings.length ? nextTextIdx : 0,
                currentCharPos: 0
            });
        }
    }, {
        key: 'render',
        value: function render() {
            var _props2 = this.props,
                strings = _props2.strings,
                component = _props2.component;
            var _state = this.state,
                currentTextIdx = _state.currentTextIdx,
                currentCharPos = _state.currentCharPos;


            var currentText = strings[currentTextIdx];
            var text = currentText.slice(0, currentCharPos);

            var componentProps = _extends({}, getComponentProps(this.props), _defineProperty({}, this.props.stringPropName, text));

            var Component = component;
            return React.createElement(Component, _extends({ ref: this._registerRef }, componentProps));
        }
    }]);

    return Typewriting;
}(PureComponent);

Typewriting.propTypes = {
    strings: PropTypes.array.isRequired,
    stringPropName: PropTypes.string,
    waitBeforeDeleteMs: PropTypes.number,
    writeSpeedMs: NumberInterval,
    deleteSpeedMs: NumberInterval,
    component: PropTypes.oneOfType([PropTypes.func, PropTypes.string])
};
Typewriting.defaultProps = {
    waitBeforeDeleteMs: 9000,
    writeSpeedMs: 100,
    deleteSpeedMs: 60,
    stringPropName: 'children',
    component: 'span'
};


module.exports = Typewriting;


return module.exports;});
